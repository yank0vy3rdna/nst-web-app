// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: job_request.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobServiceClient is the client API for JobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobServiceClient interface {
	GiveJob(ctx context.Context, in *GiveJobRequest, opts ...grpc.CallOption) (JobService_GiveJobClient, error)
	JobProgress(ctx context.Context, opts ...grpc.CallOption) (JobService_JobProgressClient, error)
	JobEnd(ctx context.Context, opts ...grpc.CallOption) (JobService_JobEndClient, error)
}

type jobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobServiceClient(cc grpc.ClientConnInterface) JobServiceClient {
	return &jobServiceClient{cc}
}

func (c *jobServiceClient) GiveJob(ctx context.Context, in *GiveJobRequest, opts ...grpc.CallOption) (JobService_GiveJobClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobService_ServiceDesc.Streams[0], "/web_nst.JobService/GiveJob", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobServiceGiveJobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobService_GiveJobClient interface {
	Recv() (*GiveJobResponse, error)
	grpc.ClientStream
}

type jobServiceGiveJobClient struct {
	grpc.ClientStream
}

func (x *jobServiceGiveJobClient) Recv() (*GiveJobResponse, error) {
	m := new(GiveJobResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobServiceClient) JobProgress(ctx context.Context, opts ...grpc.CallOption) (JobService_JobProgressClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobService_ServiceDesc.Streams[1], "/web_nst.JobService/JobProgress", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobServiceJobProgressClient{stream}
	return x, nil
}

type JobService_JobProgressClient interface {
	Send(*JobProgressData) error
	CloseAndRecv() (*Ok, error)
	grpc.ClientStream
}

type jobServiceJobProgressClient struct {
	grpc.ClientStream
}

func (x *jobServiceJobProgressClient) Send(m *JobProgressData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jobServiceJobProgressClient) CloseAndRecv() (*Ok, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ok)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobServiceClient) JobEnd(ctx context.Context, opts ...grpc.CallOption) (JobService_JobEndClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobService_ServiceDesc.Streams[2], "/web_nst.JobService/JobEnd", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobServiceJobEndClient{stream}
	return x, nil
}

type JobService_JobEndClient interface {
	Send(*JobEndRequest) error
	CloseAndRecv() (*Ok, error)
	grpc.ClientStream
}

type jobServiceJobEndClient struct {
	grpc.ClientStream
}

func (x *jobServiceJobEndClient) Send(m *JobEndRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jobServiceJobEndClient) CloseAndRecv() (*Ok, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ok)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobServiceServer is the server API for JobService service.
// All implementations must embed UnimplementedJobServiceServer
// for forward compatibility
type JobServiceServer interface {
	GiveJob(*GiveJobRequest, JobService_GiveJobServer) error
	JobProgress(JobService_JobProgressServer) error
	JobEnd(JobService_JobEndServer) error
	mustEmbedUnimplementedJobServiceServer()
}

// UnimplementedJobServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobServiceServer struct {
}

func (UnimplementedJobServiceServer) GiveJob(*GiveJobRequest, JobService_GiveJobServer) error {
	return status.Errorf(codes.Unimplemented, "method GiveJob not implemented")
}
func (UnimplementedJobServiceServer) JobProgress(JobService_JobProgressServer) error {
	return status.Errorf(codes.Unimplemented, "method JobProgress not implemented")
}
func (UnimplementedJobServiceServer) JobEnd(JobService_JobEndServer) error {
	return status.Errorf(codes.Unimplemented, "method JobEnd not implemented")
}
func (UnimplementedJobServiceServer) mustEmbedUnimplementedJobServiceServer() {}

// UnsafeJobServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobServiceServer will
// result in compilation errors.
type UnsafeJobServiceServer interface {
	mustEmbedUnimplementedJobServiceServer()
}

func RegisterJobServiceServer(s grpc.ServiceRegistrar, srv JobServiceServer) {
	s.RegisterService(&JobService_ServiceDesc, srv)
}

func _JobService_GiveJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GiveJobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobServiceServer).GiveJob(m, &jobServiceGiveJobServer{stream})
}

type JobService_GiveJobServer interface {
	Send(*GiveJobResponse) error
	grpc.ServerStream
}

type jobServiceGiveJobServer struct {
	grpc.ServerStream
}

func (x *jobServiceGiveJobServer) Send(m *GiveJobResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _JobService_JobProgress_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JobServiceServer).JobProgress(&jobServiceJobProgressServer{stream})
}

type JobService_JobProgressServer interface {
	SendAndClose(*Ok) error
	Recv() (*JobProgressData, error)
	grpc.ServerStream
}

type jobServiceJobProgressServer struct {
	grpc.ServerStream
}

func (x *jobServiceJobProgressServer) SendAndClose(m *Ok) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jobServiceJobProgressServer) Recv() (*JobProgressData, error) {
	m := new(JobProgressData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _JobService_JobEnd_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JobServiceServer).JobEnd(&jobServiceJobEndServer{stream})
}

type JobService_JobEndServer interface {
	SendAndClose(*Ok) error
	Recv() (*JobEndRequest, error)
	grpc.ServerStream
}

type jobServiceJobEndServer struct {
	grpc.ServerStream
}

func (x *jobServiceJobEndServer) SendAndClose(m *Ok) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jobServiceJobEndServer) Recv() (*JobEndRequest, error) {
	m := new(JobEndRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobService_ServiceDesc is the grpc.ServiceDesc for JobService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "web_nst.JobService",
	HandlerType: (*JobServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GiveJob",
			Handler:       _JobService_GiveJob_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "JobProgress",
			Handler:       _JobService_JobProgress_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "JobEnd",
			Handler:       _JobService_JobEnd_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "job_request.proto",
}
