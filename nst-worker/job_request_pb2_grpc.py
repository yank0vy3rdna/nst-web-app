# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import job_request_pb2 as job__request__pb2


class JobServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GiveJob = channel.unary_stream(
                '/web_nst.JobService/GiveJob',
                request_serializer=job__request__pb2.GiveJobRequest.SerializeToString,
                response_deserializer=job__request__pb2.GiveJobResponse.FromString,
                )
        self.JobProgress = channel.stream_unary(
                '/web_nst.JobService/JobProgress',
                request_serializer=job__request__pb2.JobProgressData.SerializeToString,
                response_deserializer=job__request__pb2.Ok.FromString,
                )
        self.JobEnd = channel.stream_unary(
                '/web_nst.JobService/JobEnd',
                request_serializer=job__request__pb2.JobEndRequest.SerializeToString,
                response_deserializer=job__request__pb2.Ok.FromString,
                )


class JobServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GiveJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JobProgress(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JobEnd(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JobServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GiveJob': grpc.unary_stream_rpc_method_handler(
                    servicer.GiveJob,
                    request_deserializer=job__request__pb2.GiveJobRequest.FromString,
                    response_serializer=job__request__pb2.GiveJobResponse.SerializeToString,
            ),
            'JobProgress': grpc.stream_unary_rpc_method_handler(
                    servicer.JobProgress,
                    request_deserializer=job__request__pb2.JobProgressData.FromString,
                    response_serializer=job__request__pb2.Ok.SerializeToString,
            ),
            'JobEnd': grpc.stream_unary_rpc_method_handler(
                    servicer.JobEnd,
                    request_deserializer=job__request__pb2.JobEndRequest.FromString,
                    response_serializer=job__request__pb2.Ok.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'web_nst.JobService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class JobService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GiveJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/web_nst.JobService/GiveJob',
            job__request__pb2.GiveJobRequest.SerializeToString,
            job__request__pb2.GiveJobResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JobProgress(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/web_nst.JobService/JobProgress',
            job__request__pb2.JobProgressData.SerializeToString,
            job__request__pb2.Ok.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JobEnd(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/web_nst.JobService/JobEnd',
            job__request__pb2.JobEndRequest.SerializeToString,
            job__request__pb2.Ok.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
